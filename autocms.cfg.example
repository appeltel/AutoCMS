#################################################################
#
# General settings for all tests
#
#################################################################

# Base directory for the AutoCMS system installation
export AUTOCMS_BASEDIR=/home/appelte1/autocms_dev

# Absolute path to this configuration file
export AUTOCMS_CONFIGFILE=/home/appelte1/autocms_dev/autocms.cfg.example 

# Web directory for output HTML files and graphs 
export AUTOCMS_WEBDIR=/home/appelte1/web/autocms_dev

# User and group name for job submission
export AUTOCMS_UNAME=appelte1
export AUTOCMS_GNAME=cms_stage2

# name of the site
export AUTOCMS_SITE_NAME=T2_US_Vanderbilt

# Array of test names to run. This should be delimited by ":"
export AUTOCMS_TEST_NAMES=example_test:bare_test

# time to wait between job submissions. This should be given in 
# minutes either as a divisor of 60 (i.e. 1,2,3,5,6,10,12,...) or 
# as a multiple of 60. If multiple different tests are to be run, these 
# times should be given as a ":" delimited list.
export AUTOCMS_TEST_SUBWAITS=120:10  

# How many jobs to submit at each submission time.
# If multiple different tests are to be run, these 
# times should be given as a ":" delimited list.
export AUTOCMS_TEST_SUBCOUNTS=5:1

# how often to harvest job statistics (in hours)  
# for long term performance monitoring
# this should be a divisor of 24 (i.e. 1,2,3,4,...,12 )  
export AUTOCMS_STAT_INTERVAL=6

# maximum number of jobs to hold in the queue
export AUTOCMS_MAXENQUEUE=20

# Number of days to wait before deleting logs
export AUTOCMS_LOG_LIFETIME=5

# print logs of successful jobs to webpage? (set to TRUE for yes) 
export AUTOCMS_PRINT_SUCCESS=FALSE

# Python executable to be used by autocms. This will default to just
# "python" but can be set to another value for using virtual environments
export AUTOCMS_PYTHON_EXECUTABLE=python

# The following strings are tokens to be put in the beginning
# of lines in the test pbs script for the logharvester to read 
# to determine the job status and properties.
#
# More can be added if new information is needed from the job.
# AutoCMS will automatically add an attribute to the JobRecord
# corresponding to that token.
#
# If you make a new test pbs script, you could make a new token as
#
# export AUTOCMS_cpuTemperature_TOKEN="AutoCMS: cpu temperature is "
#
# Then in the test pbs script you could add
#
# echo "${AUTOCMS_cpuTemperature_TOKEN}74"
#
# Then the JobRecord will have the attribute "cpuTemperature" with value "74"
#
# The tokens given below are special and are always present in the JobRecord.
# startTime, endTime, and errorCode are stored as integers. SUCCESS does not
# set an attribute, but is required to be present in the output for a job to be
# counted as successful.
export AUTOCMS_start_time_TOKEN="AutoCMS: timestamp_start "
export AUTOCMS_end_time_TOKEN="AutoCMS: timestamp_end "
export AUTOCMS_node_TOKEN="AutoCMS: worker node "
export AUTOCMS_exit_code_TOKEN="AutoCMS: exit code "
export AUTOCMS_error_string_TOKEN="AutoCMS ERROR Message: "
export AUTOCMS_SUCCESS_TOKEN="AutoCMS: ALL TESTS SUCCESSFUL"

# Name of the scheduler and regular expression for the expected form of
# logs returned by the scheduler. Note that test scripts will be expected
# to be named "some_test/some_test.schedulername", for example the 
# skim_test using the slurm scheduler will have the script name to be 
# submitted as "slim_test/skim_test.slurm"
#
# Note that only the slurm scheduler is implemented, but the scheduler 
# logic is separated so that other schedulers may be implemented.
export AUTOCMS_SCHEDULER="slurm"

#################################################################
#
# Settings used by the example_test
#
#################################################################

# additional tokens for example_test

export AUTOCMS_num_proc_TOKEN="AutoCMS: Number of processes on this node is "
export AUTOCMS_dice_sum_TOKEN="AutoCMS: I rolled a "
